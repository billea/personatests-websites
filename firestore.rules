rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read their own user document, but role changes are restricted
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      // Allow write but prevent role elevation (except for initial admin setup)
      allow write: if request.auth != null && request.auth.uid == userId &&
        (!('role' in request.resource.data) ||
         !('role' in resource.data) ||
         request.resource.data.role == resource.data.role ||
         request.auth.token.email == 'admin@personatests.com'); // One-time admin setup
      // Allow create for new users (without admin role)
      allow create: if request.auth != null && request.auth.uid == userId &&
        (!('role' in request.resource.data) || request.resource.data.role == 'user' ||
         request.auth.token.email == 'admin@personatests.com'); // Allow admin setup
    }
    
    // Test results
    match /testResults/{resultId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Couple compatibility results - allow read if user's email matches either partner email
    match /couple_results/{resultId} {
      allow read: if request.auth != null && 
        (request.auth.token.email == resource.data.partner1Email ||
         request.auth.token.email == resource.data.partner2Email ||
         request.auth.token.email == resource.data.partnerEmails.partner1 ||
         request.auth.token.email == resource.data.partnerEmails.partner2);
      allow create: if true; // Allow anonymous creation during test completion
      allow write: if request.auth != null && 
        (request.auth.token.email == resource.data.partner1Email ||
         request.auth.token.email == resource.data.partner2Email ||
         request.auth.token.email == resource.data.partnerEmails.partner1 ||
         request.auth.token.email == resource.data.partnerEmails.partner2);
    }
    
    // Invitations - users can read invitations they created
    match /invitations/{invitationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.inviterUid;
      allow write: if request.auth != null && request.auth.uid == resource.data.inviterUid;
      // Allow read without auth for invitation verification (with token validation in functions)
      allow read: if true;
    }
    
    // Test Invitations - users can read invitations they created or are invited to
    match /testInvitations/{invitationId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.inviterUid ||
         request.auth.token.email == resource.data.participantEmail);
      allow write: if request.auth != null && request.auth.uid == resource.data.inviterUid;
      allow create: if request.auth != null;
    }
    
    // Feedback Progress - users can read/write their own progress
    match /feedbackProgress/{progressId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Feedback Submissions - users can read submissions for their tests
    match /feedbackSubmissions/{submissionId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.testOwnerId;
      allow create: if true; // Allow anonymous submission
    }
    
    // Anonymous feedback - no authentication required for submission
    match /anonymousFeedback/{feedbackId} {
      allow read: if false; // Only functions can read feedback
      allow create: if true; // Anyone can create feedback (validated by functions)
    }
    
    // Compatibility reports
    match /compatibilityReports/{reportId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.generatedBy ||
         exists(/databases/$(database)/documents/testResults/$(resource.data.result1_id)) &&
         get(/databases/$(database)/documents/testResults/$(resource.data.result1_id)).data.userId == request.auth.uid ||
         exists(/databases/$(database)/documents/testResults/$(resource.data.result2_id)) &&
         get(/databases/$(database)/documents/testResults/$(resource.data.result2_id)).data.userId == request.auth.uid);
      allow create: if request.auth != null;
    }
    
    // Test definitions (read-only)
    match /tests/{testId} {
      allow read: if true;
    }
    
    // Question collections for dynamic tests
    match /generalKnowledgeQuestions/{questionId} {
      allow read: if true; // Everyone can read questions for tests
      allow write: if request.auth != null; // Authenticated users can manage questions
      allow create: if request.auth != null; // Authenticated users can add questions
    }
    
    match /mathSpeedQuestions/{questionId} {
      allow read: if true; // Everyone can read questions for tests
      allow write: if request.auth != null; // Authenticated users can manage questions
      allow create: if request.auth != null; // Authenticated users can add questions
    }
    
    match /memoryPowerQuestions/{questionId} {
      allow read: if true; // Everyone can read questions for tests
      allow write: if request.auth != null; // Authenticated users can manage questions
      allow create: if request.auth != null; // Authenticated users can add questions
    }

    // Contact Messages - anyone can create, only admins can read/manage
    match /contactMessages/{messageId} {
      allow create: if true; // Anyone can submit contact messages
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Language Configurations - everyone can read, only admins can write
    match /languageConfigs/{configId} {
      allow read: if true; // Everyone can read language settings for UI
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}